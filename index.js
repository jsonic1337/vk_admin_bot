var keymute = '/–º—É—Ç',
	keyunmute = '/–∞–Ω–º—É—Ç';
const {
	VK
} = require('vk-io');
const vk = new VK({
	token: " token " //—Ç–æ–∫–µ–Ω –æ—Ç –≥—Ä—É–ø–ø—ã
});
const {
	api
} = vk;
let fs = require('fs');
const path = './config.json'
fs.access(path, fs.F_OK, (err) => {
	if (err) {
		createConfig();
		return
	}
})
setInterval(saveConfig, 20 * 60000);
readConfig();
vk.updates.start();
vk.updates.on('message', (context, next) => {
	console.log(config);
	if (!config.hasOwnProperty(context.chatId)) {
		config[context.chatId] = { "admins": [239801026], "whitelist": [], "warn": {}, "mute": {}, "audioBlocked": false };
		saveConfig();
	} else if (!config[context.chatId]["warn"].hasOwnProperty(context.senderId)) {
		config[context.chatId]["warn"][context.senderId] = 0;
		saveConfig();
	} else if (config[context.chatId]['mute'].hasOwnProperty(context.senderId) && config.hasOwnProperty(context.chatId)) {
		config[context.chatId]["warn"][context.senderId]++;
		context.send(`–£ [id${context.senderId}|–í–∞—Å] –º—É—Ç! –í–∞—Ä–Ω–æ–≤: ${config[context.chatId]["warn"][context.senderId]}/5`);
		saveConfig();
		checkWarn(context.senderId, context);
	} else if (!context.isUser || context.text == null) return
	else if (context.text.toLowerCase() == '–∫—É–±–∏–∫') {
		let scope = (getRandomInt(6));
		context.send(cubes[scope]);
		context.send(`–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ ${scope+1}!`)
	} else if (context.text.toLowerCase() == '/help') {
		context.send('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:\n/–∫–∏–∫ - –∏—Å–∫–ª—é—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n/–º—É—Ç 1 - –¥–∞–µ—Ç –º—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –ª—é–±–æ–µ –≤—Ä–µ–º—è (–≤–º–µ—Å—Ç–æ 1 –º–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –ª—é–±–æ–µ —á–∏—Å–ª–æ, —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤ –º–∏–Ω—É—Ç–∞—Ö)\n/w - –¥–∞–µ—Ç –≤–∞—Ä–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é\n/unw - —Å–Ω–∏–º–∞–µ—Ç –≤—Å–µ –≤–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n–£–∫–∞–∑–∞–Ω–Ω—ã–µ –≤—ã—à–µ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Å –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ —Å–æ–≤–µ—Ä—à–∏—Ç—å –∫–∞–∫–æ–µ –ª–∏–±–æ –¥–µ–π—Å—Ç–≤–∏–µ.\n–î–æ–ø. –∫–æ–º–∞–Ω–¥—ã:\n–ö—É–±–∏–∫ - —Ä–∞–Ω–¥–æ–º –∑–Ω–∞—á–µ–Ω–∏–µ –æ—Ç 1 –¥–æ 6');
	} else if (context.hasReplyMessage == false) return
	else if (context.replyMessage.senderId < 0 || config[context.chatId]["admins"].includes(context.replyMessage.senderId)) return
	else if (context.text.startsWith(keymute)) {
		if (config[context.chatId]["admins"].includes(context.senderId)) {
			mutetime = parseInt(context.text.toLowerCase().replace(keymute, '').trim());
			if (mutetime !== mutetime) {
				mutetime = 5;
			}
			muteUser(context.replyMessage.senderId, mutetime, context.chatId);
		} else {
			checkAdmin(context);
		}
	} else if (context.text.startsWith(keyunmute)) {
		if (config[context.chatId]["admins"].includes(context.senderId)) {
			unmuteUser(context.replyMessage.senderId, context.chatId)
		} else {
			checkAdmin(context);
		}
	} else if (context.text.toLowerCase() == "/w") {
		if (config[context.chatId]["admins"].includes(context.senderId)) {
			if (!config[context.chatId]["warn"].hasOwnProperty(context.replyMessage.senderId)) {
				config[context.chatId]["warn"][context.replyMessage.senderId] = 1;
				saveConfig();
			} else {
				config[context.chatId]["warn"][context.replyMessage.senderId]++;
				saveConfig();
				checkWarn(context.replyMessage.senderId.toString(), context);
			}
			context.send(`[id${context.replyMessage.senderId}|–í—ã] –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ!\n–í–∞—Ä–Ω–æ–≤: ${config[context.chatId]["warn"][context.replyMessage.senderId]}/5`);
		} else {
			checkAdmin(context);
		}
	} else if (context.text.toLowerCase() == "/unw") {
		if (config[context.chatId]["admins"].includes(context.senderId)) {
			if (!config[context.chatId]["warn"].hasOwnProperty(context.replyMessage.senderId)) {
				config[context.chatId]["warn"][context.replyMessage.senderId] = 0;
				saveConfig();
			} else {
				config[context.chatId]["warn"][context.replyMessage.senderId] = 0;
				saveConfig();
				checkWarn(context.replyMessage.senderId.toString(), context);
			}
			context.send(`[id${context.replyMessage.senderId}|–í–∞—à–∏] –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–±–Ω—É–ª–µ–Ω—ã!\n–í–∞—Ä–Ω–æ–≤: ${config[context.chatId]["warn"][context.replyMessage.senderId]}/5`);
		} else {
			checkAdmin(context);
		}
	} else if (context.text.toLowerCase() == "/–∫–∏–∫") {
		if (config[context.chatId]["admins"].includes(context.senderId)) {
			context.kickUser(context.replyMessage.senderId);
			config[context.chatId]["warn"][context.replyMessage.senderId] = 0;
			saveConfig();
		} else {
			checkAdmin(context);
		}
	}
})
async function checkAdmin(context) {
	let users = await vk.api.messages.getConversationMembers({
		peer_id: context.peerId
	});
	let user = users.items.find((item) => item.member_id === context.senderId);
	if (user.is_admin) {
		if (!config[context.chatId]["admins"].hasOwnProperty(context.senderId)) {
			config[context.chatId]["admins"].push(context.senderId);
			console.log(config[context.chatId]);
			saveConfig();
			context.send(`[id${context.senderId}|–í—ã] –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –≤ –±–µ—Å–µ–¥–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã!`)
		}
	} else {
		context.send(`–£ [id${context.senderId}|–í–∞—Å] –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –±–µ—Å–µ–¥–µ!`)
		return
	}
}

function muteUser(userId, time, peer) {
	config[peer]['mute'][userId] = Date.now() + (time * 60000);
	sendmsg(peer, `–£ [id${userId}|–í–∞—Å] –º—É—Ç –Ω–∞ ${time} –º–∏–Ω! –ó–∞ –∫–∞–∂–¥–æ–µ –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –≤–∞—Ä–Ω!`);
}

function unmuteUser(userId, peer) {
	delete config[peer]['mute'][userId];
	sendmsg(peer, `[id${userId}|–í—ã] –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è!`);
}
setInterval(checkMute, 5000);

function checkMute() {
	Object.keys(config).forEach(key => {
		Object.keys(config[key]['mute']).forEach(key2 => {
			if (Date.now() >= config[key]['mute'][key2]) {
				unmuteUser(key2, parseInt(key));
				saveConfig();
			}
		})
	})
}

function sendmsg(chat, msg) {
	api.messages.send({
		chat_id: chat,
		message: msg,
		random_id: 0
	})
}

function checkWarn(userid, context) {
	if (config[context.chatId]["warn"][userid] >= 5) {
		context.send(`–£ [id${userid}|–í–∞—Å] –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–Ω–æ–≤. –í—ã –±—É–¥–µ—Ç–µ –∫–∏–∫–Ω—É—Ç—ã!`)
		context.kickUser(userid);
		config[context.chatId]["warn"][userid] = 0;
		saveConfig();
	}
}

function createConfig() {
	fs.writeFile("config.json", "{}", function(err) {
		if (err) {
			console.log(err);
		} else {
			console.log("–§–∞–π–ª —Å–æ–∑–¥–∞–Ω");
		}
	})
}

function readConfig() {
	fs.readFile('./config.json', 'utf8', (err, jsonString) => {
		if (err) return console.log('err: ' + err);
		config = JSON.parse(jsonString);
	})
}

function saveConfig() {
	fs.writeFile('./config.json', JSON.stringify(config), err => {
		if (err) return console.log('Error writing file', err);
	})
}

function getRandomInt(max) {
	return Math.floor(Math.random() * Math.floor(max));
}
var cubes = ["‚¨ú‚¨ú‚¨ú\n‚¨úüî≥‚¨ú\n‚¨ú‚¨ú‚¨ú","üî≥‚¨ú‚¨ú\n‚¨ú‚¨ú‚¨ú\n‚¨ú‚¨úüî≥","üî≥‚¨ú‚¨ú\n‚¨úüî≥‚¨ú\n‚¨ú‚¨úüî≥","üî≥‚¨úüî≥\n‚¨ú‚¨ú‚¨ú\nüî≥‚¨úüî≥","üî≥‚¨úüî≥\n‚¨úüî≥‚¨ú\nüî≥‚¨úüî≥","üî≥‚¨úüî≥\nüî≥‚¨úüî≥\nüî≥‚¨úüî≥"]
